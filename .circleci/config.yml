version: 2.1
# Use a package of configuration called an orb.

commands:

  destroy_environment:

    steps:
    - run:
        name: destroy/rollback
        when: on_fail
        command: |
            aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5}
orbs:
  # Choose either one of the orbs below
  # welcome: circleci/welcome-orb@0.4.1
  # aws-cli: circleci/aws-cli@2.0.3
# Define the jobs we want to run for this project
jobs:
  myjob1:  # Choose any name, such as `build`
      # The primary container, where your job's commands will run
      docker: 
        - image: circleci/node:13.8.0
      steps:
        - checkout # check out the code in the project directory
        - run: echo "hello world" # run the `echo` command

  
          

  create_infrastructure: 
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Create Cloudformation Stack
          command: |
            aws cloudformation deploy \
              --template-file template.yml \
              --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5} \
              --region us-east-1
  
  configure_infrastructure:

    docker:
      - image: python:3.7-alpine3.11
    steps:
    - checkout
    - add_ssh_keys:
            # You can get this ID in the section where you registered the SSH Key
        fingerprints: ["fd:1f:1e:b5:54:cf:c9:59:ff:e3:ec:51:38:00:41:2c"] 
    - run:
        name: Install Ansible
        command: |
          apk add --update ansible
    - run:
        name: Run Playbook and Configure server
        command: |
          ansible-playbook -i inventory.txt main-remote.yml

  smoke_testing:

    docker:
    - image: alpine:latest

    steps:
    - checkout
    - run: apk add --update curl
    - run:
        name: smoke test
        command: |
          URL="https://blog.udacity.com/"
          # Test if website exists
          if curl -s --head ${URL} 
          then
            return 0
          else
            return 1
          fi
  smoke_testing_fail:

    docker:
    - image: alpine:latest

    steps:
    - run:
        name: failed smoke test
        command: |
          return 1
    - destroy_environment
  
  # Executes the bucket.yml - Deploy an S3 bucket, and interface with that bucket to synchronize the files between local and the bucket.
# Note that the `--parameter-overrides` let you specify a value that override parameter value in the bucket.yml template file.
  create_and_deploy_front_end:
    docker:
    - image: amazon/aws-cli
    steps:
    - checkout
    - run:
        name: Execute bucket.yml - Create Cloudformation Stack
        command: |
          aws cloudformation deploy \
          --template-file bucket.yml \
          --stack-name stack-create-bucket-${CIRCLE_WORKFLOW_ID:0:7} \
          --parameter-overrides MyBucketName="mybucket-${CIRCLE_WORKFLOW_ID:0:7}"
    # Uncomment the step below if yoou wish to upload all contents of the current directory to the S3 bucket
      - run: aws s3 sync . s3://mybucket-${CIRCLE_WORKFLOW_ID:0:7} --delete

workflows:
  my_workflow:
    jobs:
      - create_and_deploy_front_end